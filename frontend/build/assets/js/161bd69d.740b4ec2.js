"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[9310],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||a;return r?n.createElement(h,s(s({ref:t},u),{},{components:r})):n.createElement(h,s({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3859:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={title:"How To Retrieve HTTP Status Codes",slug:"17-retrieve-http-status-codes",number:17,publish_date:new Date("2015-10-15T00:00:00.000Z"),tags:["test http status","retrieve http status","http status codes","proxy","proxy server","browsermob-proxy"],level:3,category:"tools"},s=void 0,i={unversionedId:"non-updated-tips/retrieve-http-status-codes/readme",id:"non-updated-tips/retrieve-http-status-codes/readme",title:"How To Retrieve HTTP Status Codes",description:"The Problem",source:"@site/docs/non-updated-tips/17-retrieve-http-status-codes/readme.md",sourceDirName:"non-updated-tips/17-retrieve-http-status-codes",slug:"/non-updated-tips/retrieve-http-status-codes/17-retrieve-http-status-codes",permalink:"/elemental-next/docs/non-updated-tips/retrieve-http-status-codes/17-retrieve-http-status-codes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/non-updated-tips/17-retrieve-http-status-codes/readme.md",tags:[{label:"test http status",permalink:"/elemental-next/docs/tags/test-http-status"},{label:"retrieve http status",permalink:"/elemental-next/docs/tags/retrieve-http-status"},{label:"http status codes",permalink:"/elemental-next/docs/tags/http-status-codes"},{label:"proxy",permalink:"/elemental-next/docs/tags/proxy"},{label:"proxy server",permalink:"/elemental-next/docs/tags/proxy-server"},{label:"browsermob-proxy",permalink:"/elemental-next/docs/tags/browsermob-proxy"}],version:"current",frontMatter:{title:"How To Retrieve HTTP Status Codes",slug:"17-retrieve-http-status-codes",number:17,publish_date:"2015-10-15T00:00:00.000Z",tags:["test http status","retrieve http status","http status codes","proxy","proxy server","browsermob-proxy"],level:3,category:"tools"},sidebar:"tutorialSidebar",previous:{title:"How To Take A Screenshot on Failure",permalink:"/elemental-next/docs/non-updated-tips/take-screenshot-on-failure/java/16-take-screenshot-on-failure"},next:{title:"How to chat with the Selenium Community",permalink:"/elemental-next/docs/non-updated-tips/irc-chat/20-irc-chat"}},p={},l=[{value:"The Problem",id:"the-problem",level:2},{value:"A Solution",id:"a-solution",level:2},{value:"An Example",id:"an-example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Outro",id:"outro",level:2}],u={toc:l},d="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"the-problem"},"The Problem"),(0,o.kt)("p",null,"There are times when you are testing a page (or numerous pages) and you want to verify that it responded correctly. A great way to handle this is by checking the HTTP Status Code that the browser received. However this functionality is not available in Selenium WebDriver."),(0,o.kt)("h2",{id:"a-solution"},"A Solution"),(0,o.kt)("p",null,"The tried and true approach that Selenium Committers and Practitioners recommend is to use a proxy server. With it, you will be able to watch and manipulate network traffic to and from the application you're testing. Thus giving you access to a whole host of functionality that isn't available otherwise."),(0,o.kt)("p",null,"Let's step through an example using ",(0,o.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"BrowserMob Proxy"),"."),(0,o.kt)("h2",{id:"an-example"},"An Example"),(0,o.kt)("p",null,"First we need to download a copy of ",(0,o.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"BrowserMob Proxy"),"."),(0,o.kt)("p",null,"Next we'll create a script and pull in our requisite libraries (e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, ",(0,o.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and it's matchers for our assertion, and the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jarib/browsermob-proxy-rb"},(0,o.kt)("inlineCode",{parentName:"a"},"browsermob/proxy"))," library to control the proxy server)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: status_codes.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\nrequire 'browsermob/proxy'\n")),(0,o.kt)("p",null,"Now let's create a method to prepare the proxy for use with Selenium. In it we start the proxy server, configure a browser profile to use it (for Firefox in this case), and return the profile object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"def configure_proxy\n  server = BrowserMob::Proxy::Server.new(\n    File.join(Dir.pwd, 'browsermob-proxy-2.0.0/bin/browsermob-proxy'))\n  @proxy = server.start.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  profile\nend\n")),(0,o.kt)("p",null,"Next we wire up some simple ",(0,o.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"def setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"setup")," we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"configure_proxy")," method when specifying the profile object. And we close the proxy in ",(0,o.kt)("inlineCode",{parentName:"p"},"teardown")," (after quitting the Selenium session)."),(0,o.kt)("p",null,"Now let's create a helper method to pull the status code out of the browser's ",(0,o.kt)("a",{parentName:"p",href:"http://www.softwareishard.com/blog/har-12-spec/"},"HTTP Archive")," (a.k.a. HAR) when an action is performed on the page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"def retrieve_status_code\n  @proxy.new_har\n  yield\n  @proxy.har.entries.first.response.status\nend\n")),(0,o.kt)("p",null,"Now we're ready to wire up our test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  status_code = retrieve_status_code do\n    @driver.get 'http://the-internet.herokuapp.com/status_codes/404'\n  end\n\n  expect(status_code).to eql 404\nend\n")),(0,o.kt)("p",null,"When visiting the page we are passing the Selenium command to the ",(0,o.kt)("inlineCode",{parentName:"p"},"retrieve_status_code")," method which returns the HTTP response code. We store this in a ",(0,o.kt)("inlineCode",{parentName:"p"},"status_code")," variable and use it to check that the response code is what we expect (",(0,o.kt)("inlineCode",{parentName:"p"},"404"),")."),(0,o.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,o.kt)("p",null,"If you save this file and run it (e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"ruby status_codes.rb")," from the command-line) here is what will happen:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Proxy server starts"),(0,o.kt)("li",{parentName:"ul"},"Proxy server session created"),(0,o.kt)("li",{parentName:"ul"},"Browser opens"),(0,o.kt)("li",{parentName:"ul"},"Visit the URL"),(0,o.kt)("li",{parentName:"ul"},"Retrieve the HTTP Status Code from loading the page"),(0,o.kt)("li",{parentName:"ul"},"Check that the status code is what was expected"),(0,o.kt)("li",{parentName:"ul"},"Browser closes"),(0,o.kt)("li",{parentName:"ul"},"Proxy session closes")),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("p",null,"If you get an error when running your test, be sure to append ",(0,o.kt)("inlineCode",{parentName:"p"},"log: true")," when creating an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Browsermob::Proxy::Server"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"  server = BrowserMob::Proxy::Server.new(\n    File.join(Dir.pwd, 'browsermob-proxy-2.0.0/bin/browsermob-proxy'), log: true)\n")),(0,o.kt)("p",null,"Now when you run your test, you will see more detailed information as to why the server was unable to start."),(0,o.kt)("h2",{id:"outro"},"Outro"),(0,o.kt)("p",null,"This tip was inspired by ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans'")," multi-part blog post series on doing the same thing in C# with Fiddler (",(0,o.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-webdriver-http-status.html"},"1"),", ",(0,o.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-http-status-codes-in.html"},"2"),", ",(0,o.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-http-status-codes-in_17.html"},"3"),") which was in response to ",(0,o.kt)("a",{parentName:"p",href:"https://code.google.com/p/selenium/issues/detail?id=141"},"Selenium Issue 141"),". Thanks Jim!"),(0,o.kt)("p",null,"Happy Testing!"))}c.isMDXComponent=!0}}]);