"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[9380],{89380:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>c,default:()=>a,frontMatter:()=>s,toc:()=>o});var r=n(74848),i=n(28453);const s={},c=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["For reference, here is the markup from ",(0,r.jsx)(t.a,{href:"http://the-internet.herokuapp.com/checkboxes",children:"the page we'll be testing against"})," (from ",(0,r.jsx)(t.a,{href:"https://github.com/saucelabs/the-internet",children:"the-internet"}),")."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:'<form>\n  <input type="checkbox"> unchecked<br>\n  <input type="checkbox" checked=""> checked\n</form>\n'})}),"\n",(0,r.jsxs)(t.p,{children:["First let's import our requisite classes (for annotations (e.g., ",(0,r.jsx)(t.code,{children:"org.junit.After"}),", etc.), driving the browser with Selenium (e.g., ",(0,r.jsx)(t.code,{children:"org.openqa.selenium.WebDriver"}),", etc.), and matchers for our assertions (e.g., ",(0,r.jsx)(t.code,{children:"org.hamcrest.CoreMatchers"}),", etc.)) and start our class with some setup and teardown methods."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// filename: Checkboxes.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport java.util.List;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Checkboxes {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n"})}),"\n",(0,r.jsx)(t.p,{children:"Before we write any tests, let's walk through both checkbox approaches to see what Selenium gives us."}),"\n",(0,r.jsx)(t.p,{children:"To do that we'll want to grab all of the checkboxes on the page, and iterate through them. Once using an attribute lookup, and again asking if the element is selected. Each time outputting the return value we get from Selenium."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'    @Test\n    public void checkboxDiscoveryTest() {\n        driver.get("http://the-internet.herokuapp.com/checkboxes");\n        List<WebElement> checkboxes = driver.findElements(By.cssSelector("input[type=\'checkbox\']"));\n\n        System.out.println("With .attribute(\'checked\')");\n        for (WebElement checkbox : checkboxes) {\n            System.out.println(String.valueOf(checkbox.getAttribute("checked")));\n        }\n\n        System.out.println("\\nWith .selected?");\n        for (WebElement checkbox : checkboxes) {\n            System.out.println(checkbox.isSelected());\n        }\n    }\n// ...\n'})}),"\n",(0,r.jsxs)(t.p,{children:["When we save our file and run it (e.g., ",(0,r.jsx)(t.code,{children:"mvn clean test"})," from the command-line), here is the output we'll see:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"With .attribute('checked')\nnull\n\"true\"\n\nWith .selected?\nfalse\ntrue\n"})}),"\n",(0,r.jsxs)(t.p,{children:["With the attribute lookup, depending on the state of the checkbox, we receive either a ",(0,r.jsx)(t.code,{children:"null"})," or a string with the value ",(0,r.jsx)(t.code,{children:'"true"'}),". Whereas with ",(0,r.jsx)(t.code,{children:".selected?"})," we get a boolean (",(0,r.jsx)(t.code,{children:"true"})," or ",(0,r.jsx)(t.code,{children:"false"}),") response."]}),"\n",(0,r.jsx)(t.p,{children:"Let's see what these approaches look like when put to use in a test."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'// filename: Checkboxes.java\n// ...\n    @Test\n    public void checkboxOption1Test() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/checkboxes");\n        WebElement checkbox = driver.findElement(By.cssSelector("form input:nth-of-type(2)"));\n        assertThat(checkbox.getAttribute("checked"), is(not("null")));\n        assertThat(checkbox.getAttribute("checked"), is("true"));\n    }\n// ...\n'})}),"\n",(0,r.jsxs)(t.p,{children:["With an attribute lookup we check against the return value (which is a String). In this case we're seeing if the return value is not ",(0,r.jsx)(t.code,{children:'"null"'})," and is ",(0,r.jsx)(t.code,{children:'"true"'}),". Let's see what the other approach looks like."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'// filename: Checkboxes.java\n// ...\n    @Test\n    public void checkboxOption2Test() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/checkboxes");\n        WebElement checkbox = driver.findElement(By.cssSelector("form input:nth-of-type(2)"));\n        assertThat(checkbox.isSelected(), is(true));\n    }\n\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"In this case, when referencing the return value it's a simple matter of checking against a boolean."}),"\n",(0,r.jsx)(t.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,r.jsxs)(t.p,{children:["When you save and run the file (e.g., ",(0,r.jsx)(t.code,{children:"mvn clean test"})," from the command-line) here is what will happen:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Visit the page"}),"\n",(0,r.jsx)(t.li,{children:"Find all of the checkboxes on the page"}),"\n",(0,r.jsx)(t.li,{children:"Assert that the second checkbox (the one that is supposed to be checked on initial page load) is checked"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(t.p,{children:"Attribute lookups are meant for pulling information out of the page for review. While they work in this circumstance, you're better off using a selected lookup. But the approach you choose will depend on how the checkboxes you're testing are constructed."}),"\n",(0,r.jsxs)(t.p,{children:["Thanks to ",(0,r.jsx)(t.a,{href:"https://github.com/RomanIsko",children:"Roman Isko"})," for contributing the initial Java code for this tip."]}),"\n",(0,r.jsx)(t.p,{children:"Happy Testing!"})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);