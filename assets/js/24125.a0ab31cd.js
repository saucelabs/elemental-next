"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[24125],{24125:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>h});var i=r(74848),n=r(28453);const a={},o=void 0,s={id:"how-to-work-with-hovers/_java",title:"_java",description:"Example",source:"@site/tips/50-how-to-work-with-hovers/_java.mdx",sourceDirName:"50-how-to-work-with-hovers",slug:"/how-to-work-with-hovers/_java",permalink:"/tips/how-to-work-with-hovers/_java",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/elemental-next/blob/main/frontend/tips/50-how-to-work-with-hovers/_java.mdx",tags:[],version:"current",lastUpdatedBy:"renovate[bot]",lastUpdatedAt:1723910635e3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"_csharp",permalink:"/tips/how-to-work-with-hovers/_csharp"},next:{title:"_javascript",permalink:"/tips/how-to-work-with-hovers/_javascript"}},l={},h=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(t.p,{children:["Our example application is available ",(0,i.jsx)(t.a,{href:"http://the-internet.herokuapp.com/hovers",children:"here"})," on ",(0,i.jsx)(t.a,{href:"http://github.com/saucelabs/the-internet",children:"the-internet"}),". It has a few avatars displayed in a grid layout. When you hover over each of them, they display additional user information and a link to view a full profile."]}),"\n",(0,i.jsx)(t.p,{children:"Let's write a test that will hover over the first avatar and make sure that this additional information appears."}),"\n",(0,i.jsxs)(t.p,{children:["First we'll import our requisite classes (for annotations (e.g., ",(0,i.jsx)(t.code,{children:"org.junit.After"}),", etc.), driving the browser with Selenium (e.g., ",(0,i.jsx)(t.code,{children:"org.openqa.selenium.WebDriver"}),", etc.), and matchers for our assertions (e.g., ",(0,i.jsx)(t.code,{children:"org.hamcrest.CoreMatchers"}),", etc.)) and start our class with some setup and teardown methods."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// filename: Hovers.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.time.Duration;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Hovers {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n"})}),"\n",(0,i.jsx)(t.p,{children:"Now let's write our test."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// ...\n    @Test\n    public void hoversTest() {\n        driver.get("http://the-internet.herokuapp.com/hovers");\n\n        WebElement avatar = driver.findElement(By.className("figure"));\n        Actions builder = new Actions(driver);\n        builder.moveToElement(avatar).build().perform();\n\n        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("figcaption")));\n\n        assertThat(driver.findElement(By.className("figcaption")).isDisplayed(), is(Boolean.TRUE));\n    }\n\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["After visiting the page we find the first avatar and store it in a variable (",(0,i.jsx)(t.code,{children:"avatar"}),"). We then use Selenium's ",(0,i.jsx)(t.code,{children:"action.moveToElement"})," method and pass the avatar variable to it (which triggers the hover) and check to see if the additional user information displayed."]}),"\n",(0,i.jsx)(t.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,i.jsxs)(t.p,{children:["When you save this file and run it (e.g., ",(0,i.jsx)(t.code,{children:"mvn clean test"})," from the command-line) here is what will happen:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Open the browser"}),"\n",(0,i.jsx)(t.li,{children:"Visit the page"}),"\n",(0,i.jsx)(t.li,{children:"Hover over the first avatar"}),"\n",(0,i.jsx)(t.li,{children:"Assert that the caption displayed to the user"}),"\n",(0,i.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(t.p,{children:"Hopefully this will help you handle more complex user interactions like hovers."}),"\n",(0,i.jsxs)(t.p,{children:["Thanks to ",(0,i.jsx)(t.a,{href:"https://github.com/RomanIsko",children:"Roman Isko"})," for contributing the initial Java code for this tip."]}),"\n",(0,i.jsx)(t.p,{children:"Happy Testing!"})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);