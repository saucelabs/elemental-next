"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[6381],{66381:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>d,default:()=>c,frontMatter:()=>s,toc:()=>l});var t=r(74848),i=r(28453);const s={},d=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function o(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["To start things off let's pull in our requisite libraries (e.g., ",(0,t.jsx)(n.code,{children:"selenium-webdriver"})," to drive the browser, ",(0,t.jsx)(n.code,{children:"rspec/expectations"})," and ",(0,t.jsx)(n.code,{children:"RSpec::Matchers"})," for our assertions, and ",(0,t.jsx)(n.code,{children:"rest-client"})," for our HTTP request) and wire up some simple ",(0,t.jsx)(n.code,{children:"setup"}),", ",(0,t.jsx)(n.code,{children:"teardown"}),", and ",(0,t.jsx)(n.code,{children:"run"})," methods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# filename: download_revisited.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\nrequire 'rest-client'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now we're ready to write up our test."}),"\n",(0,t.jsxs)(n.p,{children:["It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,t.jsx)(n.code,{children:"HEAD"})," request with it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com/download'\n  link = @driver.find_element(css: '.example a').attribute('href')\n  response = RestClient.head link\n  expect(response.headers[:content_type]).to eql('application/octet-stream')\n  expect(response.headers[:content_length].to_i).to be > 0\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once we receive the response we can check it's header for the ",(0,t.jsx)(n.code,{children:"content_type"})," and ",(0,t.jsx)(n.code,{children:"content_length"})," to make sure the file is the correct type and not empty."]}),"\n",(0,t.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,t.jsxs)(n.p,{children:["If you save this and run it (e.g., ",(0,t.jsx)(n.code,{children:"ruby download_revisited.rb"})," from the command-line) here is what will will happen:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open the browser"}),"\n",(0,t.jsx)(n.li,{children:"Load the page"}),"\n",(0,t.jsx)(n.li,{children:"Grab the URL of the first download link"}),"\n",(0,t.jsxs)(n.li,{children:["Perform a ",(0,t.jsx)(n.code,{children:"HEAD"})," request against it with an HTTP library"]}),"\n",(0,t.jsx)(n.li,{children:"Store the response"}),"\n",(0,t.jsx)(n.li,{children:"Check the response headers to see that the file type is correct"}),"\n",(0,t.jsx)(n.li,{children:"Check the response headers to see that the file is not empty"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"Compared to the browser specific configuration with Selenium this is hands-down a leaner, faster, and more maintainable approach."}),"\n",(0,t.jsx)(n.p,{children:"Happy Testing!"})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);