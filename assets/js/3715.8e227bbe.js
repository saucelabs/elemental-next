"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[3715],{16096:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>d,default:()=>o,frontMatter:()=>a,toc:()=>l});var i=r(74848),t=r(28453);const a={},d=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function s(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["You can see a simple HTML5 drag and drop example ",(0,i.jsx)(n.a,{href:"http://the-internet.herokuapp.com/drag_and_drop",children:"here on the-internet"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["First, let's borrow ",(0,i.jsx)(n.a,{href:"https://gist.github.com/rcorreia/2362544",children:"the JavaScript made available by rcorreia on GitHub"})," for this workaround and store it in a local file (e.g., ",(0,i.jsx)(n.code,{children:"dnd.js"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"Now we can create a Selenium script to consume the JavaScript file, visit the page, execute the JavaScript, and perform an assertion."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After including our dependent libraries, we wire up our ",(0,i.jsx)(n.code,{children:"setup"}),", ",(0,i.jsx)(n.code,{children:"teardown"}),", and ",(0,i.jsx)(n.code,{children:"run"})," actions. Now we're ready to write our test."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"run do\n  @driver.get \"http://the-internet.herokuapp.com/drag_and_drop\"\n\n  dnd_javascript = File.read(Dir.pwd + '/dnd.js')\n  @driver.execute_script(dnd_javascript+\"$('#column-a').simulateDragDrop({ dropTarget: '#column-b'});\")\n\n  expect(@driver.find_element(id: 'column-a').text).to eql('B')\n  expect(@driver.find_element(id: 'column-b').text).to eql('A')\n\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After loading the page we read in the ",(0,i.jsx)(n.code,{children:"dnd.js"})," file and store it in a local variable. We then use Selenium to execute ",(0,i.jsx)(n.code,{children:"dnd_javascript"})," along with the function calls and elements we want to work with. After that, it's just a simple matter of grabbing text from the page and making an assertion against it."]}),"\n",(0,i.jsxs)(n.p,{children:["Since there are only two elements to drag and drop on the page, they should have switched places. So, ",(0,i.jsx)(n.code,{children:"column-a"})," should now contain the text 'B', and ",(0,i.jsx)(n.code,{children:"column-b"})," should contain the text 'A'."]}),"\n",(0,i.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,i.jsx)(n.p,{children:"When you run the ruby file, here is what will happen:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Open the browser"}),"\n",(0,i.jsx)(n.li,{children:"Visit the page"}),"\n",(0,i.jsx)(n.li,{children:"Text in Column A and Column B will switches places"}),"\n",(0,i.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"Hopefully this tip has helped you figure out how to wrangle HTML5 dragging and dropping while there is a known bug for it in Selenium."}),"\n",(0,i.jsx)(n.p,{children:"Happy Testing!"})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}}}]);