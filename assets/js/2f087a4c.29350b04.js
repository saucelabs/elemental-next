"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[7180],{75883:t=>{t.exports=JSON.parse('{"label":"javascript","permalink":"/tips/tags/javascript","allTagsPath":"/tips/tags","count":5,"items":[{"id":"broken-images/67-broken-images","title":"Broken Images","description":"Selenium is built to mimic human action (e.g., clicking, typing, dragging, dropping, etc.). So how do you use it to test for broken images?","permalink":"/tips/67-broken-images"},{"id":"dynamic-pages/23-dynamic-pages","title":"Dynamic Pages","description":"Let\'s say you want to test some functionality of a web application but it loads things dynamically. You might think about using a hard-coded sleep (that you constantly tweak due to test failures) or you use a blanket timeout that you likely bump up to address test instabilities as well.","permalink":"/tips/23-dynamic-pages"},{"id":"highlight-elements/65-highlight-elements","title":"Highlight Elements","description":"It\'s likely that you\'ll run into odd test behavior that makes you question the locators you\'re using in a test. But how do you interrogate your locators to make sure they are doing what you expect?","permalink":"/tips/65-highlight-elements"},{"id":"drag-and-drop/39-drag-and-drop","title":"How to Test HTML5 Drag and Drop","description":"Exercising a page\'s drag-and-drop functionality used to be simple with Selenium\'s Action Builder, but sadly, it won\'t work with HTML5 drag and drop.","permalink":"/tips/39-drag-and-drop"},{"id":"javascript-alerts/51-javascript-alerts","title":"How To Work With JavaScript Alerts","description":"Built into Selenium is the ability to switch to an alert window and either accept or dismiss it. This way your tests can continue unencumbered by dialog boxes that may feel just out of reach.","permalink":"/tips/51-javascript-alerts"}],"unlisted":false}')}}]);