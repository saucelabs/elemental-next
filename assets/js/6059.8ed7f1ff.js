"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[6059],{66059:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>h,frontMatter:()=>i,toc:()=>a});var s=t(74848),r=t(28453);const i={},l=void 0,a=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["First let's include our requisite classes for our test framework (e.g., ",(0,s.jsx)(n.code,{children:"NUnit.Framework"}),"), driving the browser with Selenium (e.g., ",(0,s.jsx)(n.code,{children:"OpenQA.Selenium"}),", etc.), and start our class off with some setup and teardown methods."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// filename: KeyboardKeys.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Interactions;\n\npublic class KeyboardKeys\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now we can wire up our test."}),"\n",(0,s.jsxs)(n.p,{children:["Let's use an example from ",(0,s.jsx)(n.a,{href:"https://github.com/saucelabs/the-internet",children:"the-internet"})," that will display what key has been pressed (",(0,s.jsx)(n.a,{href:"http://the-internet.herokuapp.com/key_presses",children:"link"}),"). We'll use the result text that gets displayed on the page to perform our assertion."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// filename: KeyboardKeys.cs\n// ...\n    [Test]\n    public void KeyboardKeysExample()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/key_presses");\n\n        Driver.FindElement(By.Id("target")).SendKeys(Keys.Space);\n        Assert.That(Driver.FindElement(By.Id("result")).Text.Equals("You entered: SPACE"));\n// ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:["After visiting the page we find a visible element (e.g., the primary content of the page) and send the space key to it (e.g., ",(0,s.jsx)(n.code,{children:".SendKeys(Keys.SPACE)"}),"). Then we grab the resulting text (e.g., ",(0,s.jsx)(n.code,{children:'Driver.FindElement(By.Id("result")).Text'}),") and assert that it says what we expect (e.g., ",(0,s.jsx)(n.code,{children:'.Equals("You entered: SPACE"'}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, we can issue a key press without finding the element by using the Selenium Action Builder."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// filename: KeyboardKeys.cs\n// ...\n        Actions Builder = new Actions(Driver);\n        Builder.SendKeys(Keys.Left).Build().Perform();\n        Assert.That(Driver.FindElement(By.Id("result")).Text.Equals("You entered: LEFT"));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,s.jsxs)(n.p,{children:["When you save this file and run it (e.g. ",(0,s.jsx)(n.code,{children:"nunit3-console.exe .\\KeyboardKeys.sln"})," from the command-line) here is what will happen:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Open the browser"}),"\n",(0,s.jsx)(n.li,{children:"Visit the page"}),"\n",(0,s.jsx)(n.li,{children:"Find the element and send the space key to it"}),"\n",(0,s.jsx)(n.li,{children:"Find the result text on the page and asset it's what we expect"}),"\n",(0,s.jsx)(n.li,{children:"Send the left arrow key to the element that's currently in focus"}),"\n",(0,s.jsx)(n.li,{children:"Find the result text on the page and assert it's what we expect"}),"\n",(0,s.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. If you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should use."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);