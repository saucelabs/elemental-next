"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[3525],{73525:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>h,frontMatter:()=>s,toc:()=>a});var r=n(74848),i=n(28453);const s={},o=void 0,a=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["To start things off let's import our requisite classes (for annotations (e.g., ",(0,r.jsx)(t.code,{children:"org.junit.After"}),", etc.), driving the browser with Selenium (e.g., ",(0,r.jsx)(t.code,{children:"org.openqa.selenium.WebDriver"}),", etc.), matchers for our assertions (e.g., ",(0,r.jsx)(t.code,{children:"org.hamcrest.CoreMatchers"}),", etc.), and an HTTP library to handle our HEAD request (e.g., ",(0,r.jsx)(t.code,{children:"org.apache.http.HttpResponse"}),", etc.) and start our class with some setup and teardown methods."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// filename: DownloadFileRevisited.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.not;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpHead;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\npublic class DownloadFileRevisited {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n"})}),"\n",(0,r.jsx)(t.p,{children:"Now we're ready to wire up our test."}),"\n",(0,r.jsxs)(t.p,{children:["It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,r.jsx)(t.code,{children:"HEAD"})," request with it."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'// filename: DownloadFileRevisited.java\n// ...\n    @Test\n    public void downloadFileRevisitedTest() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/download");\n        String link = driver.findElement(By.cssSelector(".example a:nth-of-type(1)")).getAttribute("href");\n\n        HttpClient httpClient = HttpClientBuilder.create().build();\n        HttpHead request = new HttpHead(link);\n        HttpResponse response = httpClient.execute(request);\n        String contentType = response.getFirstHeader("Content-Type").getValue();\n        int contentLength = Integer.parseInt(response.getFirstHeader("Content-Length").getValue());\n\n        assertThat(contentType, is("application/octet-stream"));\n        assertThat(contentLength, is(not(0)));\n    }\n\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Once we receive the response we check it's header for the content type (e.g., ",(0,r.jsx)(t.code,{children:'response.getFirstHeader("Content-Type")'}),") and content length (e.g., ",(0,r.jsx)(t.code,{children:'response.getFirstHeader("Content-Length")'}),") to make sure the file is the correct type and not empty."]}),"\n",(0,r.jsx)(t.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,r.jsxs)(t.p,{children:["When you save this and run it (e.g., ",(0,r.jsx)(t.code,{children:"mvn clean install"})," from the command-line) here is what will will happen:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Load the page"}),"\n",(0,r.jsx)(t.li,{children:"Grab the URL of the first download link"}),"\n",(0,r.jsxs)(t.li,{children:["Perform a ",(0,r.jsx)(t.code,{children:"HEAD"})," request against it with an HTTP library"]}),"\n",(0,r.jsx)(t.li,{children:"Store the response headers"}),"\n",(0,r.jsx)(t.li,{children:"Check the response headers to see that the file type is correct"}),"\n",(0,r.jsx)(t.li,{children:"Check the response headers to see that the file is not empty"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(t.p,{children:"Compared to the browser specific configuration with Selenium this is hands-down a leaner, faster, and more maintainable approach."}),"\n",(0,r.jsxs)(t.p,{children:["Thanks to ",(0,r.jsx)(t.a,{href:"https://github.com/RomanIsko",children:"Roman Isko"})," for contributing the initial Java code for this tip."]}),"\n",(0,r.jsx)(t.p,{children:"Happy Testing!"})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);