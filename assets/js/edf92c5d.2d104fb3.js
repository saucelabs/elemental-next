"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[17097,69413],{69413:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var t=r(74848),s=r(28453);const a={},l=void 0,i={id:"one-test-multiple-browsers-parallel/_ruby",title:"_ruby",description:"Example",source:"@site/tips/42-one-test-multiple-browsers-parallel/_ruby.mdx",sourceDirName:"42-one-test-multiple-browsers-parallel",slug:"/one-test-multiple-browsers-parallel/_ruby",permalink:"/tips/one-test-multiple-browsers-parallel/_ruby",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/elemental-next/blob/main/frontend/tips/42-one-test-multiple-browsers-parallel/_ruby.mdx",tags:[],version:"current",lastUpdatedBy:"renovate[bot]",lastUpdatedAt:1722240844e3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"How to Run a Test on Multiple Browsers",permalink:"/tips/41-one-test-multiple-browsers"},next:{title:"How to Run a Test on Multiple Browsers, In Parallel",permalink:"/tips/42-one-test-multiple-browsers-parallel"}},o={},d=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Our initial setup stays mostly the same. There are only a couple of minor changes we'll need to make."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"ENV['SAUCE_USERNAME'] = 'your username'\nENV['SAUCE_API_KEY']  = 'your api key'\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ndef setup(browser_name, browser_version)\n  caps = Selenium::WebDriver::Remote::Capabilities.send(browser_name.to_sym)\n  caps.platform = 'Windows XP'\n  caps.version = browser_version.to_s\n\n  Thread.current[:driver] = Selenium::WebDriver.for(\n    :remote,\n    url: \"https://#{ENV['SAUCE_USERNAME']}:#{ENV['SAUCE_API_KEY']}@ondemand.saucelabs.com/wd/hub\",\n    desired_capabilities: caps)\nend\n\ndef teardown\n  Thread.current[:driver].quit\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"Since we are working with threads, we will need to use variables that are thread safe. The best candidates are\nthread local variables. They have a global scope (similar to global variables) but are only accessible from within\nthe thread that created it. This way we won't run into any odd collisions across simultaneous test runs."}),"\n",(0,t.jsxs)(n.p,{children:["So instead of instance variables (e.g., ",(0,t.jsx)(n.code,{children:"@driver"}),") we are now storing each instance of Selenium in this new kind of\nvariable and referencing it as needed (e.g., ",(0,t.jsx)(n.code,{children:"Thread.current[:driver]"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# filename: example42.rb\n\nBROWSERS = { firefox: '27',\n             chrome: '32',\n             internet_explorer: '8' }\n\ndef run\n  threads = []\n  BROWSERS.each_pair do |browser, browser_version|\n    threads << Thread.new do\n      setup(browser, browser_version)\n      yield\n      teardown\n    end\n  end\n  threads.each { |thread| thread.join }\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Our browser list remains untouched, but our ",(0,t.jsx)(n.code,{children:"run"})," method has been updated to spawn and join threads (which is how\nyou finish a thread). With this setup a new thread will be spawned for each of the browsers in the list, perform\nits actions, and finish."]}),"\n",(0,t.jsx)(n.p,{children:"Will all of that in place, we just need to update our test to use the new thread local driver variable."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"run do\n  Thread.current[:driver].get 'https://the-internet.herokuapp.com'\n  Thread.current[:driver].title.should == 'The Internet'\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If we run this script from the command line (",(0,t.jsx)(n.code,{children:"ruby examle42.rb"}),") and head over\n",(0,t.jsx)(n.a,{href:"https://saucelabs.com/account",children:"the Sauce Labs Account page"}),", then we should see three tests running simultaneously."]}),"\n",(0,t.jsxs)(n.p,{children:["NOTE: the number of parallel sessions allotted to your Sauce Labs account will dictate how quickly your tests will\nfinish. For instance, if you add two new browsers to ",(0,t.jsx)(n.code,{children:"BROWSER_LIST"})," and run this, only 3 sessions will run in Sauce\nLabs, queuing the other two until some of the original sessions finish."]}),"\n",(0,t.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Simultaneously loads each browser in a Sauce Labs job"}),"\n",(0,t.jsx)(n.li,{children:"Each test loads the page and asserts the title is correct"}),"\n",(0,t.jsx)(n.li,{children:"Each session closes when it is complete"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"There are alternative ways to run your tests in parallel. Some more notable approaches include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"through a test framework (e.g., TestNG in Java)"}),"\n",(0,t.jsx)(n.li,{children:"through Continuous Integration"}),"\n",(0,t.jsxs)(n.li,{children:["through a third-party library (e.g., ",(0,t.jsx)(n.a,{href:"https://github.com/grosser/parallel_tests",children:"parallel_tests in Ruby"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For a full write-up on how to parallel_tests, check out ",(0,t.jsx)(n.a,{href:"https://elementalselenium.com/docs/parallel/27-parallel",children:"tip 27"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Happy Testing!"})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var t=r(96540);const s={},a=t.createContext(s);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);