"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[7644],{57644:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>a,frontMatter:()=>s,toc:()=>d});var r=t(74848),i=t(28453);const s={},o=void 0,d=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"In the first half of our example we include our libraries and our usual setup, teardown, and run actions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the run action we define our loop and its behavior, creating the interactive prompt we want."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"run do\n  loop do\n    print '>> '\n    input = gets.chomp\n    if input == 'q'\n      puts 'Quitting...'\n      @driver.quit\n      exit 0\n    end\n    begin\n      eval input\n    rescue Exception => e\n      puts e.message\n    end\n  end\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"print"})," command is used instead of ",(0,r.jsx)(n.code,{children:"puts"})," because we want ",(0,r.jsx)(n.code,{children:">> "})," to appear on the same line as the input that we are issuing. This gives us the look and feel of a prompt. And we use ",(0,r.jsx)(n.code,{children:"gets.chomp"})," to take in input. ",(0,r.jsx)(n.code,{children:"gets"})," is responsible for receiving the input. And ",(0,r.jsx)(n.code,{children:"chomp"})," removes the carriage return character (e.g. '\\n') from the input."]}),"\n",(0,r.jsxs)(n.p,{children:["Before executing the input we perform a check to see if the letter ",(0,r.jsx)(n.strong,{children:"q"})," is issued. If so, the script will post a message to the terminal, close the browser, and exit the prompt."]}),"\n",(0,r.jsxs)(n.p,{children:["We then execute the input provided with ",(0,r.jsx)(n.code,{children:"eval"})," and rescue exceptions, posting their message to the terminal when they occur."]}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example command you may issue to start: ",(0,r.jsx)(n.code,{children:"@driver.get 'https://www.google.com'"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Firefox loads"}),"\n",(0,r.jsx)(n.li,{children:"An interactive prompt is presented"}),"\n",(0,r.jsx)(n.li,{children:"Issue a Selenium command and see it execute in the browser"}),"\n",(0,r.jsx)(n.li,{children:"Issue a command that it does not recognize (or that errors), and see a message stating the issue in the prompt"}),"\n",(0,r.jsxs)(n.li,{children:["Issue ",(0,r.jsx)(n.strong,{children:"q"}),", the browser will close and the prompt will terminate"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Hopefully this REPL will help save you some time and frustration -- making it easier to write and debug your tests."})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);