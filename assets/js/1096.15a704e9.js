"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[1096],{1096:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>s,default:()=>c,frontMatter:()=>i,toc:()=>a});var o=n(74848),t=n(28453);const i={},s=void 0,a=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(r.p,{children:["Before we get started we'll need to ",(0,o.jsx)(r.a,{href:"http://bmp.lightbody.net/",children:"download a copy of BrowserMob Proxy"}),". Once we have that, we'll want to include our requisite libraries:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"selenium-webdriver"})," to control the browser"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"browsermob/proxy"})," to configure/user BrowserMob Proxy"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"rspec=expectations"})," and ",(0,o.jsx)(r.code,{children:"RSpec::Matchers"})," for assertions"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"json"})," to consume JSON data for the performance checks"]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["After that, we can create methods to configure the proxy server (",(0,o.jsx)(r.code,{children:"configure_proxy"}),"), set the browser profile to use the proxy server (",(0,o.jsx)(r.code,{children:"browser_profile"}),"), pull these together so the test will have a working browser that uses the proxy server (",(0,o.jsx)(r.code,{children:"setup"}),"), and tear things down after running the test (",(0,o.jsx)(r.code,{children:"teardown"}),")."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"# filename: performance.rb\n\nrequire 'selenium-webdriver'\nrequire 'browsermob/proxy'\nrequire 'rspec-expectations'\ninclude RSpec::Matchers\nrequire 'json'\n\ndef configure_proxy\n  proxy_binary = BrowserMob::Proxy::Server.new('./browsermob-proxy/bin/browsermob-proxy')\n  proxy_binary.start\n  proxy_binary.create_proxy\nend\n\ndef browser_profile\n  browser_profile = Selenium::WebDriver::Firefox::Profile.new\n  browser_profile.proxy = @proxy.selenium_proxy\n  browser_profile\nend\n\ndef setup\n  @proxy = configure_proxy\n  @driver = Selenium::WebDriver.for :firefox, profile: browser_profile\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n"})}),"\n",(0,o.jsx)(r.p,{children:"Next we'll want to tell the proxy server to capture traffic and return a payload (a.k.a. a HTTP Archive, or HAR for short)."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"def capture_traffic\n  @proxy.new_har\n  yield\n  @proxy.har\nend\n"})}),"\n",(0,o.jsxs)(r.p,{children:["We then tie this all together with a ",(0,o.jsx)(r.code,{children:"run"})," method. It will call ",(0,o.jsx)(r.code,{children:"setup"}),", execute test commands while capturing traffic (",(0,o.jsx)(r.code,{children:"capture_traffic"}),"), save the HAR to a uniquely named file (which is named with a time stamp), and tear everything down when it's done (",(0,o.jsx)(r.code,{children:"teardown"}),")."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:'def run\n  setup\n  har = capture_traffic { yield }\n  @har_file = "./selenium_#{Time.now.strftime("%m%d%y_%H%M%S")}.har"\n  har.save_to @har_file\n  teardown\nend\n'})}),"\n",(0,o.jsx)(r.p,{children:"Now we can put all of this to use by exercising a feature of our application with some Selenium commands."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  Selenium::WebDriver::Wait.new(timeout: 8).until do\n    @driver.find_element(css: '#finish')\n  end\nend\n"})}),"\n",(0,o.jsxs)(r.p,{children:["If we run this script (e.g., ",(0,o.jsx)(r.code,{children:"ruby performance.rb"})," from the command-line) then we will see the browser load, complete some actions, and close. After which, a HAR file will appear in the working directory."]}),"\n",(0,o.jsx)(r.p,{children:"This outputted file is what we'll use to perform some simple benchmark checks."}),"\n",(0,o.jsxs)(r.p,{children:["Rather than identify specific benchmarks to check, let's run through a gamut of them by leveraging a pre-existing benchmarking tool like ",(0,o.jsx)(r.a,{href:"https://developer.yahoo.com/yslow/",children:"YSlow"}),". Fortunately, there is ",(0,o.jsx)(r.a,{href:"http://yslow.org/command-line-har/",children:"a command-line YSlow tool"})," that can consume a HAR file and provide us with useful output."]}),"\n",(0,o.jsxs)(r.p,{children:["It's a Node.js app. So first we'll need to ",(0,o.jsx)(r.a,{href:"http://nodejs.org/",children:"install Node.js"}),", and then install the app (with ",(0,o.jsx)(r.code,{children:"npm install yslow -g"}),")."]}),"\n",(0,o.jsx)(r.p,{children:"After that, we can run it from the command line like so:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.code,{children:"yslow --info basic --format plain example.har"})}),"\n",(0,o.jsx)(r.p,{children:"This will consume a HAR file and output some helpful information -- including an overall score."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:"size: 476.8K (476888 bytes)\noverall score: A (99)\nurl: http://the-internet.herokuapp.com/dynamic_loading/2\n# of requests: 16\nruleset: ydefault\n"})}),"\n",(0,o.jsxs)(r.p,{children:["This overall score is what we are interested in. To get at it, we'll need to change the format type from ",(0,o.jsx)(r.code,{children:"plain"})," to ",(0,o.jsx)(r.code,{children:"json"}),"."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.code,{children:"yslow --info basic --format json example.har"})}),"\n",(0,o.jsxs)(r.p,{children:["This will return a Hash that we can then easily parse through to get the value we want (e.g., the overall score with a key of ",(0,o.jsx)(r.code,{children:'"o"'}),")."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:'{"w":476887,"o":99,"u":"http%3A%2F%2Fthe-internet.herokuapp.com%2Fdynamic_loading%2F2","r":16,"i":"ydefault"}\n'})}),"\n",(0,o.jsx)(r.p,{children:"Now we can automate the YSlow command-line execution and perform an assertion by adding the following to the end of our script."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:'performance_results = JSON.parse `yslow --info basic --format json #{@har_file}`\nperformance_grade = performance_results["o"]\nperformance_grade.should be > 95\n'})}),"\n",(0,o.jsx)(r.p,{children:"Now when we run this if the overall score drops below a 95 out of 100 then the test will fail."}),"\n",(0,o.jsx)(r.p,{children:"From here we can wire this up to a Continuous Integration server and run it headlessly (either with Xvfb or GhostDriver) to perform these checks in an ongoing basis."}),"\n",(0,o.jsx)(r.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Load the browser"}),"\n",(0,o.jsx)(r.li,{children:"Capture all requests through the proxy server"}),"\n",(0,o.jsx)(r.li,{children:"Save the captured requests to a HTTP Archive (HAR) file on disk"}),"\n",(0,o.jsx)(r.li,{children:"Run the HAR file through YSlow to get a numeric grade"}),"\n",(0,o.jsx)(r.li,{children:"Assert that the grade is above a certain level"}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(r.p,{children:["You can see the full code example ",(0,o.jsx)(r.a,{href:"https://gist.github.com/tourdedave/bc4b75fd6cdc1eef7860",children:"here"}),"."]}),"\n",(0,o.jsxs)(r.p,{children:["For more insights into what HAR is and the many uses of it, check out ",(0,o.jsx)(r.a,{href:"http://www.igvita.com/2012/08/28/web-performance-power-tool-http-archive-har/",children:"this write-up and video from Ilya Grigorik's blog"}),". You can also ",(0,o.jsx)(r.a,{href:"http://www.softwareishard.com/blog/har-12-spec/",children:"check out the HAR spec"}),". And there's also ",(0,o.jsx)(r.a,{href:"https://www.youtube.com/watch?v=qQgDDAan4rM",children:"a great presentation from David Burns and David Henderson at GTAC 2009"})," on using Selenium to do performance benchmarking."]}),"\n",(0,o.jsx)(r.p,{children:"Happy Testing!"})]})}function c(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);