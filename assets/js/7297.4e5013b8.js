"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[7297],{57297:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>d,default:()=>a,frontMatter:()=>s,toc:()=>l});var t=r(74848),i=r(28453);const s={},d=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["For this example we will use ",(0,t.jsx)(n.a,{href:"http://github.com/saucelabs/the-internet",children:"a dropdown list"})," from ",(0,t.jsx)(n.a,{href:"http://the-internet.herokuapp.com/dropdown",children:"the-internet"}),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is disabled."]}),"\n",(0,t.jsxs)(n.p,{children:["First let's require our dependent libraries (e.g., ",(0,t.jsx)(n.code,{children:"selenium-webdriver"})," to control the browser and ",(0,t.jsx)(n.code,{children:"rspec/expectations"})," and ",(0,t.jsx)(n.code,{children:"RSpec::Matchers"})," for our assertion) and wire up some simple ",(0,t.jsx)(n.code,{children:"setup"}),", ",(0,t.jsx)(n.code,{children:"teardown"}),", and ",(0,t.jsx)(n.code,{children:"run"})," methods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# filename: dropdown_disabled.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now let's wire up our test."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com/dropdown'\n  dropdowns = @driver.find_elements(tag_name: 'option')\n  item_of_interest = dropdowns.find { |dropdown| dropdown.text == 'Please select an option' }\n  expect(item_of_interest.enabled?).to eql false\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"After loading the page, we find all of the elements that have an option tag (which are all of the items in the dropdown list). This will return an array, so we iterate over the collection and find the item we want based on a text comparison."}),"\n",(0,t.jsxs)(n.p,{children:["Once we have the element we want we see if it's enabled (with ",(0,t.jsx)(n.code,{children:".enabled?"}),") and assert based on the response."]}),"\n",(0,t.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,t.jsxs)(n.p,{children:["If you save this file and run it (e.g., ",(0,t.jsx)(n.code,{children:"ruby dropdown_disabled.rb"})," from the command-line) here is what will happen:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open a browser"}),"\n",(0,t.jsx)(n.li,{children:"Visit the page"}),"\n",(0,t.jsx)(n.li,{children:"Grab all dropdown list elements and find the one we want by its text"}),"\n",(0,t.jsx)(n.li,{children:"Assert that the element is not enabled"}),"\n",(0,t.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"Hopefully this tip has helped make the task of seeing whether or not an element is enabled or disabled more approachable."}),"\n",(0,t.jsx)(n.p,{children:"Happy Testing!"})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);