"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[58282,39225],{39225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var i=t(74848),s=t(28453);const l={},r=void 0,a={id:"disabled-element/_csharp",title:"_csharp",description:"Example",source:"@site/tips/40-disabled-element/_csharp.mdx",sourceDirName:"40-disabled-element",slug:"/disabled-element/_csharp",permalink:"/tips/disabled-element/_csharp",draft:!1,unlisted:!1,editUrl:"https://github.com/saucelabs/elemental-next/blob/main/frontend/tips/40-disabled-element/_csharp.mdx",tags:[],version:"current",lastUpdatedBy:"renovate[bot]",lastUpdatedAt:17268705e5,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"How to Test HTML5 Drag and Drop",permalink:"/tips/39-drag-and-drop"},next:{title:"_java",permalink:"/tips/disabled-element/_java"}},d={},o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["For this example we will use ",(0,i.jsx)(n.a,{href:"http://github.com/saucelabs/the-internet",children:"the dropdown list"})," from ",(0,i.jsx)(n.a,{href:"http://the-internet.herokuapp.com/dropdown",children:"the-internet"}),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is in fact disabled."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's start by including our requisite classes for our test framework (e.g., ",(0,i.jsx)(n.code,{children:"NUnit.Framework"}),"), driving the browser with Selenium (e.g., ",(0,i.jsx)(n.code,{children:"OpenQA.Selenium"}),", etc.), and start our class off with some setup and teardown methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// filename: DisabledElements.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Support.UI;\n\npublic class DisabledElements\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now to wire up our test."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// filename: DisabledElements.cs\n// ...\n    [Test]\n    public void ElementDisabled()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/dropdown");\n        var Dropdown = new SelectElement(Driver.FindElement(By.Id("dropdown")));\n        // The SelectedOption we want is selected by default on page load\n        Assert.False(Dropdown.SelectedOption.Enabled);\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["After visiting the page we find the dropdown list with the ",(0,i.jsx)(n.code,{children:"SelectElement"})," function and store it in a variable. We then use in our assertion, focusing on the currently selected option which is the first one by default on page load (e.g., ",(0,i.jsx)(n.code,{children:"Dropdown.SelectedOption"}),") and check that it is enabled (e.g., ",(0,i.jsx)(n.code,{children:".Enabled"}),"). This will return a boolean result. If the element is disabled (e.g., not selectable) then Selenium will return ",(0,i.jsx)(n.code,{children:"false"}),". So that's what we use in our assertion (e.g., ",(0,i.jsx)(n.code,{children:"Assert.False"}),")."]}),"\n",(0,i.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,i.jsxs)(n.p,{children:["When you save this file and run it (e.g., ",(0,i.jsx)(n.code,{children:"nunit3-console.exe .\\DisabledElements.sln"})," from the command-line) here is what will happen:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Open a browser"}),"\n",(0,i.jsx)(n.li,{children:"Visit the page"}),"\n",(0,i.jsx)(n.li,{children:"Grab the dropdown list"}),"\n",(0,i.jsx)(n.li,{children:"Assert that the target element is not enabled"}),"\n",(0,i.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"Hopefully this tip has helped make the task of seeing whether an element is enabled or disabled more approachable."}),"\n",(0,i.jsx)(n.p,{children:"Happy Testing!"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);