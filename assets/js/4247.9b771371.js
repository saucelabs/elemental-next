"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[4247],{14247:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>t,default:()=>d,frontMatter:()=>s,toc:()=>l});var o=n(74848),i=n(28453);const s={},t=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function a(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(r.p,{children:["First we'll need to download BrowserMob Proxy from ",(0,o.jsx)(r.a,{href:"http://bmp.lightbody.net/",children:"here"}),"."]}),"\n",(0,o.jsxs)(r.p,{children:["Then we can wire up our test script to pull in our requisite libraries (e.g., ",(0,o.jsx)(r.code,{children:"selenium-webdriver"})," to drive the browser, ",(0,o.jsx)(r.code,{children:"rspec/expectations"})," and it's matchers for our assertion, and ",(0,o.jsx)(r.a,{href:"https://github.com/jarib/browsermob-proxy-rb",children:(0,o.jsx)(r.code,{children:"browsermob/proxy"})})," to control the proxy server)."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"# filename: bandwidth_limit.rb\n\nrequire 'browsermob/proxy'\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n"})}),"\n",(0,o.jsx)(r.p,{children:"Now let's configure the proxy server and bind it to a Selenium browser profile."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"def configure_proxy\n  server = BrowserMob::Proxy::Server.new('./browsermob-proxy-2.1.0-beta-3/bin/browsermob-proxy')\n  server.start\n  @proxy = server.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  profile\nend\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Now we can create ",(0,o.jsx)(r.code,{children:"setup"}),", ",(0,o.jsx)(r.code,{children:"teardown"}),", and ",(0,o.jsx)(r.code,{children:"run"})," methods to handle our test configuration."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"def setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\n  @driver.manage.timeouts.page_load = 300 # seconds\n  @proxy.limit(upstream_kbps: 20, downstream_kbps: 30)\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,o.jsxs)(r.p,{children:["In ",(0,o.jsx)(r.code,{children:"setup"})," we set the default timeout for Selenium to 5 minutes (e.g. ",(0,o.jsx)(r.code,{children:"300"})," seconds) and specify an upload limit of ",(0,o.jsx)(r.code,{children:"20"})," kilobits per second and a download limit of ",(0,o.jsx)(r.code,{children:"30"})," kilobits per second (which is similar to a dial-up connection)."]}),"\n",(0,o.jsx)(r.p,{children:"Now let's write our test. A simple page load and copy assertion will suffice (to make sure the page actually loaded)."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  expect(@driver.find_element(class: 'heading').text).to eql('Welcome to the Internet')\nend\n"})}),"\n",(0,o.jsx)(r.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,o.jsxs)(r.p,{children:["If you save this file and run it (e.g., ",(0,o.jsx)(r.code,{children:"ruby bandwidth_limit.rb"})," from the command-line) here is what will happen:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Proxy server starts"}),"\n",(0,o.jsx)(r.li,{children:"Proxy server session created"}),"\n",(0,o.jsx)(r.li,{children:"Browser opens (connecting to the proxy server session with a large default timeout)"}),"\n",(0,o.jsx)(r.li,{children:"Proxy bandwidth constraints applied"}),"\n",(0,o.jsx)(r.li,{children:"Visit the page (which loads slowly)"}),"\n",(0,o.jsx)(r.li,{children:"Page eventually loads"}),"\n",(0,o.jsx)(r.li,{children:"Grab the text from the page heading"}),"\n",(0,o.jsx)(r.li,{children:"Perform an assertion against the text to make sure it loaded"}),"\n",(0,o.jsx)(r.li,{children:"Browser closes"}),"\n",(0,o.jsx)(r.li,{children:"Proxy session closes"}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(r.p,{children:["It may not be clear in ",(0,o.jsx)(r.a,{href:"https://github.com/jarib/browsermob-proxy-rb",children:(0,o.jsx)(r.code,{children:"browsermob-proxy-rb"})})," what options and functionality are available since the library is light on documentation. But the code is easy to read and has good comments. It's worth looking at ",(0,o.jsx)(r.a,{href:"https://github.com/jarib/browsermob-proxy-rb/blob/master/lib/browsermob/proxy/client.rb",children:"the client class"})," to see what's available."]}),"\n",(0,o.jsxs)(r.p,{children:["Alternatively, you can BrowserMob Proxy through it's Rest API. You can find out more about that on ",(0,o.jsx)(r.a,{href:"https://github.com/lightbody/browsermob-proxy#rest-api",children:"the BrowserMob Proxy GitHub page"}),"."]}),"\n",(0,o.jsx)(r.p,{children:"Happy Testing!"})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);