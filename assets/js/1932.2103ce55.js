"use strict";(self.webpackChunkelemental_selenium=self.webpackChunkelemental_selenium||[]).push([[1932],{11932:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>l,frontMatter:()=>s,toc:()=>h});var r=t(74848),c=t(28453);const s={},i=void 0,h=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["For reference, here is the markup from ",(0,r.jsx)(n.a,{href:"http://the-internet.herokuapp.com/checkboxes",children:"the page we will be testing against"})," (an example from ",(0,r.jsx)(n.a,{href:"https://github.com/saucelabs/the-internet",children:"the-internet"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form>\n  <input type="checkbox"> unchecked<br>\n  <input type="checkbox" checked=""> checked\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We kick things off by requiring our dependent libraries (e.g., ",(0,r.jsx)(n.code,{children:"selenium-webdriver"})," to drive the browser, and ",(0,r.jsx)(n.code,{children:"rspec/expectations"})," & ",(0,r.jsx)(n.code,{children:"RSpec::Matchers"})," to handle our assertions) and wire up some simple ",(0,r.jsx)(n.code,{children:"setup"}),", ",(0,r.jsx)(n.code,{children:"teardown"}),", and ",(0,r.jsx)(n.code,{children:"run"})," methods to abstract our test configuration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# filename: checkboxes.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"Before we write any tests, let's walk through both checkbox approaches to see what Selenium gives us."}),"\n",(0,r.jsx)(n.p,{children:"To do that we'll want to grab all of the checkboxes on the page, and iterate through them. Once using an attribute lookup, and again asking if the element is selected -- each time outputting the return value we get from Selenium."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com/checkboxes'\n  checkboxes = @driver.find_elements(css: 'input[type=\"checkbox\"]')\n\n  puts \"With .attribute('checked')\"\n  checkboxes.each { |checkbox| puts checkbox.attribute('checked').inspect }\n\n  puts \"\\nWith .selected?\"\n  checkboxes.each { |checkbox| puts checkbox.selected?.inspect }\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When we save our file and run it (e.g., ",(0,r.jsx)(n.code,{children:"ruby checkboxes.rb"})," from the command-line), here is the output we'll see."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"With .attribute('checked')\nnil\n\"true\"\n\nWith .selected?\nfalse\ntrue\n"})}),"\n",(0,r.jsxs)(n.p,{children:["With the attribute lookup, depending on the state of the checkbox, we receive either a ",(0,r.jsx)(n.code,{children:"nil"})," or a string with the value ",(0,r.jsx)(n.code,{children:'"true"'}),". Whereas with ",(0,r.jsx)(n.code,{children:".selected?"})," we get a boolean (",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),") response."]}),"\n",(0,r.jsx)(n.p,{children:"Let's see what these approaches look like when put to use in a test."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com/checkboxes'\n  checkboxes = @driver.find_elements(css: 'input[type=\"checkbox\"]')\n  expect(checkboxes.last.attribute('checked')).not_to be_nil\n  # alternatively\n  expect(checkboxes.last.attribute('checked')).to eql(\"true\")\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["With an attribute lookup, the simplest thing to do is to assert that the return value is not ",(0,r.jsx)(n.code,{children:"nil"}),". Alternatively we could have checked for the value ",(0,r.jsx)(n.code,{children:'"true"'}),". Let's see what the other approach looks like."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com/checkboxes'\n  checkboxes = @driver.find_elements(css: 'input[type=\"checkbox\"]')\n  expect(checkboxes.last.selected?).to eql true\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"When checking to see if a checkbox has been selected, it's a straightforward matter of checking for a boolean value."}),"\n",(0,r.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,r.jsxs)(n.p,{children:["When you save and run the file (e.g., ",(0,r.jsx)(n.code,{children:"ruby checkboxes.rb"})," from the command-line) here is what will happen:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open the browser"}),"\n",(0,r.jsx)(n.li,{children:"Visit the page"}),"\n",(0,r.jsx)(n.li,{children:"Find all of the checkboxes on the page"}),"\n",(0,r.jsx)(n.li,{children:"Assert that the last checkbox (the one that is supposed to be checked on initial page load) is checked"}),"\n",(0,r.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.p,{children:["Attribute lookups are generally meant for pulling information out of the page for review, however, in this case they lend themselves to seeing if a checkbox is checked. There is a method which was built for this use case that is more readable and has a predictable set of return values. ",(0,r.jsx)(n.code,{children:"isSelected"})," should be the thing you reach for, knowing that an attribute lookup is there as a solid backup if you find you need it."]})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);